#!/usr/bin/make -f
include /usr/share/dpatch/dpatch.make

PACKAGE = ocaml
OCAMLMAJOR = 3.10
OCAMLMINOR = 2
OCAMLABI = $(OCAMLMAJOR).$(OCAMLMINOR)
STDLIBDIR = /usr/lib/ocaml/$(OCAMLABI)
MD5SUMSDIR = /var/lib/ocaml/md5sums
INSTDIR = $(CURDIR)/debian/ocaml-nox/usr

NATIVE_ARCHS = $(shell cat debian/native-archs)
DISTDIR = $(PACKAGE)-$(OCAMLMAJOR).$(OCAMLMINOR)
SRCTARBALL = $(PACKAGE)-source-$(OCAMLMAJOR).$(OCAMLMINOR).tar.bz2

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_BUILD_ARCH      ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)

CFLAGS = -Wall -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_PROGRAM += -s
endif
ifeq (arm,$(DEB_BUILD_ARCH))
CFG_CC_FLAGS = -cc gcc-4.2
endif

abi-sed:
	for t in `find debian/ -name \*.in | grep -v debian/control.in`; do \
	  sed -e 's%#OcamlABI#%$(OCAMLABI)%' -e 's%#OcamlMAJOR#%$(OCAMLMAJOR)%' $$t >$${t%.in};	\
	done
	touch $@

abi-sed-clean:
	rm -f abi-sed
	for t in `find debian/ -name \*.in | grep -v debian/control.in`; do \
	  rm -f $${t%.in}; \
	done

# Generate ocaml-native-compilers' Architecture field.
# Should never be called automatically.
debian/control:
	sed -e 's/#OcamlNativeArchs#/$(NATIVE_ARCHS)/g' debian/control.in > $@

pre-config: debian/$(SRCTARBALL)
	for ext in sub guess; do \
	  if [ -f /usr/share/misc/config.$$ext ] && ! [ -f debian/config.orig.$$ext ] ; then \
	    mv config/gnu/config.$$ext debian/config.orig.$$ext; \
	    cp -f /usr/share/misc/config.$$ext config/gnu/config.$$ext; \
	  fi; \
	done
	touch $@

debian/$(SRCTARBALL):
	ln -fs . $(DISTDIR)	# beware of the symlink recursion!
	tar --anchored -chjf $@ \
		--exclude=$(DISTDIR)/$(DISTDIR)	\
		--exclude-from=debian/ocaml-source.exclude \
		$(DISTDIR)/

config-stamp: pre-config patch-stamp abi-sed
	dh_testdir
	./configure --with-pthread -prefix /usr $(CFG_CC_FLAGS)		\
		-libdir /usr/lib/ocaml/$(OCAMLABI)			\
		-mandir /usr/share/man					\
		-tkdefs "-I/usr/include/tcl8.4"				\
		-tklibs "-L/usr/lib -ltk8.4 -ltcl8.4"
	sed -e "s%MANDIR=.*$$%MANDIR=\$$(PREFIX)/share/man%g"           			\
	    -e "s%LIBDIR=.*$$%LIBDIR=\$$(PREFIX)/lib/ocaml/$(OCAMLABI)%g"			\
	    -e "s%STUBLIBDIR=.*$$%STUBLIBDIR=\$$(PREFIX)/lib/ocaml/$(OCAMLABI)/stublibs%g"	\
		config/Makefile > config/Makefile.debian
	mv config/Makefile.debian config/Makefile
	if test -z "`grep "OTHERLIBRARIES.*labltk" config/Makefile`"; then\
		echo "Error, labltk library was not built";		\
		echo "Check your tcl/tk development packages";		\
		echo "Aborting.";					\
		exit 1;							\
	fi
	(cd debian/ocaml-md5sums && chmod +x configure && ./configure $(MD5SUMSDIR))
	touch config-stamp


patch-stamp: abi-sed
# Architecture
build: build-arch build-indep

build-arch: build-arch-stamp
build-arch-stamp: config-stamp

	# Add here commands to compile the arch part of the package.
	if test ! -d boot.debian; then 					\
		cp -xa boot boot.debian;				\
	fi
	$(MAKE) world
	$(MAKE) bootstrap
ifneq ($(findstring $(DEB_BUILD_ARCH),$(NATIVE_ARCHS)),)
	@echo "Building native compilers"
	$(MAKE) opt opt.opt
	touch opt-built-stamp
endif
	if [ -x ./ocamlopt ]; then					\
		$(MAKE) -C debian/ocaml-md5sums opt;			\
	else								\
		$(MAKE) -C debian/ocaml-md5sums all;			\
	fi
	touch build-arch-stamp

build-indep: build-indep-stamp config-stamp
build-indep-stamp:
	# create ocaml source tarball
	touch $@

clean: abi-sed unpatch
	dh_testdir
	dh_testroot
	-$(RM) build-arch-stamp build-indep-stamp config-stamp abi-sed opt-built-stamp pre-config

	# Add here commands to clean up after the build process.
	[ ! -f "$(CURDIR)/config/Makefile" ] || $(MAKE) clean
	if test -d boot.debian; then	\
		$(RM) -r boot;		\
		mv boot.debian boot;	\
	fi
	[ ! -f "$(CURDIR)/config/Makefile" ] || $(MAKE) -C emacs clean
	$(MAKE) -C debian/ocaml-md5sums clean
	# Restore files altered by debian/rules
	for ext in sub guess; do \
	  if [ -f debian/config.orig.$$ext ] ; then \
	    mv -f debian/config.orig.$$ext config/gnu/config.$$ext; \
	  fi; \
	done
	if head -n 1 emacs/ocamltags.in | grep -q '^#!/bin/sh'; then \
		sed -i 1d emacs/ocamltags.in; \
	fi
	# Files not cleaned by upstream (most of them are cleaned
	# using debian/clean feature of dh_clean in debhelper 7)
	-$(RM) ocaml-$(OCAMLABI)

	dh_clean
	debian/rules abi-sed-clean
	-$(RM) debian/$(SRCTARBALL)

install: install-indep install-arch
install-indep: build-indep
	dh_testdir
	dh_testroot
	dh_prep -i
	dh_installdirs -i

	# Install Emacs files
	$(MAKE) -C emacs EMACSDIR=$(CURDIR)/debian/ocaml-mode/usr/share/emacs/site-lisp/ocaml-mode \
		NOCOMPILE=true simple-install
	if ! head -n 1 emacs/ocamltags.in | grep -q '^#!/bin/sh'; then \
		sed -i -e '1 i #!/bin/sh' emacs/ocamltags.in; \
	fi
	$(MAKE) -C emacs SCRIPTDIR=$(CURDIR)/debian/ocaml-mode/usr/bin install-ocamltags

	dh_install --sourcedir=. -i

install-arch: build-arch
	dh_testdir
	dh_testroot
	dh_prep -a
	dh_installdirs -a

	# Let's install ocaml first.
	sed -e 's|PREFIX=\"/.*\"|PREFIX=\"$(INSTDIR)"|' < config/config.sh > config/config.debian.install.sh
	$(MAKE) install PREFIX=$(INSTDIR)

	# Now move the graphics files over
	if [ -e opt-built-stamp ]; then					\
		dh_movefiles -pocaml					\
			--sourcedir=debian/ocaml-nox			\
			`cat debian/ocaml-nox.optfiles`;		\
	else								\
		dh_movefiles -pocaml					\
			--sourcedir=debian/ocaml-nox;			\
	fi

	# Move away camlp4 stuff
	if [ -e opt-built-stamp ]; then					\
		dh_movefiles --sourcedir=debian/ocaml-nox -pcamlp4-extra \
			`cat debian/camlp4-extra.optfiles` ; \
		dh_movefiles --sourcedir=debian/ocaml-nox -pcamlp4 \
			`cat debian/camlp4.optfiles` ; \
	else \
		dh_movefiles --sourcedir=debian/ocaml-nox -pcamlp4-extra ; \
		dh_movefiles --sourcedir=debian/ocaml-nox -pcamlp4 ; \
	fi

	# Install camlp4 .mli files
	# XXX assumption: no filename clashes
	for mli in `find camlp4 -name '*.mli'` ; do \
		install -m 644 $$mli debian/camlp4$(STDLIBDIR)/camlp4/ ; \
	done

	# Then move the ocaml-base-nox package.
	dh_movefiles --sourcedir=debian/ocaml-nox -pocaml-base-nox

	# And base's corresponding graphics stuff.
	dh_movefiles --sourcedir=debian/ocaml-nox -pocaml-base

	# The ocaml-native-compilers, if available.
	if [ -e opt-built-stamp ]; then					\
		dh_movefiles -pocaml-native-compilers			\
			--sourcedir=debian/ocaml-nox;			\
		cp debian/ocamlfind/ocaml-native-compilers.conf		\
			debian/ocaml-native-compilers/usr/share/ocaml-findlib/;	\
	fi

	# The interpreter files
	dh_movefiles --sourcedir=debian/ocaml-nox -pocaml-interp

	# Install ocaml-md5sums
	$(MAKE) -C debian/ocaml-md5sums install DESTDIR=$(CURDIR)/debian/ocaml-base-nox/usr/bin

	# Compute core entries of the ocaml md5sums registry and install them
	(cd debian/ocaml-md5sums &&									\
	 chmod +x feeding.sh &&									\
	 for pkg in ocaml-nox ocaml ocaml-compiler-libs; do					\
		mkdir -p ../$$pkg$(MD5SUMSDIR);						\
		./feeding.sh $$pkg $(STDLIBDIR) $(OCAMLABI) ../$$pkg$(STDLIBDIR) >	\
			../$$pkg$(MD5SUMSDIR)/$$pkg.md5sums;				\
	 done)

	# Remove .opt manpages from ocaml-nox
	rm -f debian/ocaml-nox/usr/share/man/man1/*.opt.1

	# Make some symbolic links
	cd debian/ocaml/usr/share/doc/ocaml; \
		ln -sf ../ocaml-base-nox/Changes.gz .; \
		ln -sf ../ocaml-base-nox/README.gz .; \
		ln -sf ../ocaml-base-nox/README.Debian .
	cd debian/ocaml-nox/usr/share/doc/ocaml-nox; \
		ln -sf ../ocaml-base-nox/Changes.gz .; \
		ln -sf ../ocaml-base-nox/README.gz .; \
		ln -sf ../ocaml-base-nox/README.Debian .
	cd debian/ocaml-base/usr/share/doc/ocaml-base; \
		ln -sf ../ocaml-base-nox/Changes.gz .; \
		ln -sf ../ocaml-base-nox/README.gz .; \
		ln -sf ../ocaml-base-nox/README.Debian .

	# Remove empty directory
	for i in `cat debian/ocaml-nox.empty-dirs`; do \
       		if test -d "debian/ocaml-nox/$$i" && test -z "`ls -1 'debian/ocaml-nox/$$i'`"; then \
			$(RM) -r "debian/ocaml-nox/$$i"; \
		fi; \
	done
	

	# Install override files
	cp debian/ocaml-compiler-libs.override debian/ocaml-compiler-libs/usr/share/lintian/overrides/ocaml-compiler-libs
	cp debian/ocaml-nox.override debian/ocaml-nox/usr/share/lintian/overrides/ocaml-nox

	chmod +x debian/cdbs/ocamldoc-api-ref-config
	dh_install --sourcedir=. -a

# Must not depend on anything. This is to be called by
# binary-arch/binary-multi in another 'make' thread.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs Changes
	dh_installdocs
	-find debian/ocaml -type d -name CVS -exec rm -rf {} \;
	-find debian/ocaml -type f -name .cvsignore -exec rm -rf {} \;
	dh_installexamples
	dh_installmenu
	dh_installemacsen
	dh_installman
	dh_link
	dh_strip
	dh_compress
	dh_fixperms -Xocamldoc-api-ref-config
	dh_makeshlibs
	dh_installdeb

# Build architecture independant packages using the common target.
binary-indep: install-indep
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common
	dh_gencontrol -i -- -VF:OCamlABI="$(OCAMLABI)"
	dh_md5sums -i
	dh_builddeb -i

# Build architecture dependant packages using the common target.
binary-arch: install-arch
	$(MAKE) -f debian/rules DH_OPTIONS=-s binary-common
	dh_shlibdeps -s
	if [ ! -e opt-built-stamp ]; then			\
	  dh_gencontrol -pocaml-nox --				\
		-VF:BestProvides=",ocaml-best-compilers"	\
		-VF:OCamlABI="$(OCAMLABI)";			\
	else 							\
	  dh_gencontrol -pocaml-nox --				\
	  	-VF:BestProvides=""				\
		-VF:OCamlABI="$(OCAMLABI)";			\
	  dh_gencontrol -pocaml-native-compilers --		\
		-VF:OCamlABI="$(OCAMLABI)";			\
	fi
	dh_gencontrol -pocaml -- -VF:OCamlABI="$(OCAMLABI)"
	dh_gencontrol -pocaml-base-nox -- -VF:OCamlABI="$(OCAMLABI)"
	dh_gencontrol -pocaml-base -- -VF:OCamlABI="$(OCAMLABI)"
	dh_gencontrol -pocaml-interp -- -VF:OCamlABI="$(OCAMLABI)"
	dh_gencontrol -pocaml-compiler-libs -- -VF:OCamlABI="$(OCAMLABI)"
	dh_gencontrol -pcamlp4 -- -VF:OCamlABI="$(OCAMLABI)"
	dh_gencontrol -pcamlp4-extra -- -VF:OCamlABI="$(OCAMLABI)"
	dh_md5sums -s
	dh_builddeb -s

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install install-indep install-arch build-arch abi-sed-clean
