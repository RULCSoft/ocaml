From: Stefano Zacchiroli <zack@debian.org>
Date: Tue, 19 May 2009 17:25:59 +0200
Subject: [PATCH] Add to ocamldoc support for native code dynamic loading

That enables using ocamldoc flags such as "-g" also with
ocamldoc.opt. Patch is taken from OCaml CVS and is already
integrated upstream for future releases.
---
 man/ocamldoc.m            |    5 +----
 ocamldoc/Makefile         |   29 +++++++++++++++--------------
 ocamldoc/odoc.ml          |   18 +++++++++---------
 ocamldoc/odoc_args.ml     |    8 ++------
 ocamldoc/odoc_args.mli    |    4 ----
 ocamldoc/odoc_messages.ml |    5 ++---
 6 files changed, 29 insertions(+), 40 deletions(-)

diff --git a/man/ocamldoc.m b/man/ocamldoc.m
index 5d1ed6a..757ec58 100644
--- a/man/ocamldoc.m
+++ b/man/ocamldoc.m
@@ -110,10 +110,7 @@ to display it.
 .TP
 .BI \-g \ file
 Dynamically load the given file (which extension usually is .cmo or .cma),
-which defines a custom documentation generator. This option is supported by the
-.BR ocamldoc (1)
-command, but not by its native-code version
-.BR ocamldoc.opt .
+which defines a custom documentation generator.
 If the given file is a simple one and does not exist in
 the current directory, then ocamldoc looks for it in the custom
 generators default directory, and in the directories specified with the
diff --git a/ocamldoc/Makefile b/ocamldoc/Makefile
index f53046c..a3cf8fa 100644
--- a/ocamldoc/Makefile
+++ b/ocamldoc/Makefile
@@ -111,16 +111,17 @@ CMOFILES= odoc_config.cmo \
 CMXFILES= $(CMOFILES:.cmo=.cmx)
 CMIFILES= $(CMOFILES:.cmo=.cmi)
 
-EXECMOFILES=$(CMOFILES)\
-	odoc_dag2html.cmo\
-	odoc_to_text.cmo\
-	odoc_ocamlhtml.cmo\
-	odoc_html.cmo\
-	odoc_man.cmo\
+EXECMOFILES=$(CMOFILES) \
+	odoc_dag2html.cmo \
+	odoc_to_text.cmo \
+	odoc_ocamlhtml.cmo \
+	odoc_html.cmo \
+	odoc_man.cmo \
 	odoc_latex_style.cmo \
-	odoc_latex.cmo\
-	odoc_texi.cmo\
-	odoc_dot.cmo
+	odoc_latex.cmo \
+	odoc_texi.cmo \
+	odoc_dot.cmo \
+	odoc.cmo
 
 EXECMXFILES= $(EXECMOFILES:.cmo=.cmx)
 EXECMIFILES= $(EXECMOFILES:.cmo=.cmi)
@@ -199,10 +200,10 @@ libopt: $(OCAMLDOC_LIBCMXA) $(OCAMLDOC_LIBCMI)
 debug:
 	make OCAMLPP=""
 
-$(OCAMLDOC): $(EXECMOFILES) odoc.cmo
-	$(OCAMLC) -o $@ -linkall unix.cma str.cma dynlink.cma $(LINKFLAGS) $(OCAMLCMOFILES) $(EXECMOFILES) odoc.cmo
-$(OCAMLDOC_OPT): $(EXECMXFILES) odoc_opt.cmx
-	$(OCAMLOPT) -o $@ unix.cmxa str.cmxa $(LINKFLAGS) $(OCAMLCMXFILES) $(EXECMXFILES) odoc_opt.cmx
+$(OCAMLDOC): $(EXECMOFILES)
+	$(OCAMLC) -o $@ -linkall unix.cma str.cma dynlink.cma $(LINKFLAGS) $(OCAMLCMOFILES) $(EXECMOFILES)
+$(OCAMLDOC_OPT): $(EXECMXFILES)
+	$(OCAMLOPT) -o $@ unix.cmxa str.cmxa dynlink.cmxa $(LINKFLAGS) $(OCAMLCMXFILES) $(EXECMXFILES)
 
 $(OCAMLDOC_LIBCMA): $(LIBCMOFILES)
 	$(OCAMLC) -a -o $@ $(LINKFLAGS) $(OCAMLCMOFILES) $(LIBCMOFILES)
@@ -211,7 +212,7 @@ $(OCAMLDOC_LIBCMXA): $(LIBCMXFILES)
 
 manpages: stdlib_man/Pervasives.3o
 
-dot: $(EXECMOFILES) odoc.cmo
+dot: $(EXECMOFILES)
 	$(OCAMLDOC_RUN) -dot -dot-reduce -o ocamldoc.dot $(INCLUDES) \
 	odoc*.ml
 
diff --git a/ocamldoc/odoc.ml b/ocamldoc/odoc.ml
index 472e93b..14ef26c 100644
--- a/ocamldoc/odoc.ml
+++ b/ocamldoc/odoc.ml
@@ -25,17 +25,18 @@ let print_DEBUG s = print_string s ; print_newline ()
 
 (* we check if we must load a module given on the command line *)
 let arg_list = Array.to_list Sys.argv
-let (cmo_or_cma_opt, paths) =
+let (cm_opt, paths) =
   let rec iter (f_opt, inc) = function
       [] | _ :: [] -> (f_opt, inc)
     | "-g" :: file :: q when
         ((Filename.check_suffix file "cmo") or
-         (Filename.check_suffix file "cma")) &
+         (Filename.check_suffix file "cma") or
+           (Filename.check_suffix file "cmxs")) &
         (f_opt = None) ->
-          iter (Some file, inc) q
-    | "-i" :: dir :: q ->
-        iter (f_opt, inc @ [dir]) q
-    | _ :: q ->
+      iter (Some file, inc) q
+  | "-i" :: dir :: q ->
+      iter (f_opt, inc @ [dir]) q
+  | _ :: q ->
         iter (f_opt, inc) q
   in
   iter (None, []) arg_list
@@ -63,12 +64,11 @@ let get_real_filename name =
      )
 
 let _ =
-  match cmo_or_cma_opt with
+  match cm_opt with
     None ->
       ()
   | Some file ->
-      (* initializations for dynamic loading *)
-      Dynlink.init ();
+      let file = Dynlink.adapt_filename file in
       Dynlink.allow_unsafe_modules true;
       try
         let real_file = get_real_filename file in
diff --git a/ocamldoc/odoc_args.ml b/ocamldoc/odoc_args.ml
index f82458a..2b1943d 100644
--- a/ocamldoc/odoc_args.ml
+++ b/ocamldoc/odoc_args.ml
@@ -24,8 +24,6 @@ type source_file =
 
 let include_dirs = Clflags.include_dirs
 
-let bytecode_mode = ref true
-
 class type doc_generator =
     object
       method generate : Odoc_module.t_module list -> unit
@@ -254,10 +252,8 @@ let options = ref [
   "-dot", Arg.Unit (fun () -> set_doc_generator !default_dot_generator), M.generate_dot ;
   "-customdir", Arg.Unit (fun () -> Printf.printf "%s\n" Odoc_config.custom_generators_path; exit 0),
   M.display_custom_generators_dir ;
-  "-i", Arg.String (fun s -> if !bytecode_mode then () else (prerr_endline (M.option_not_in_native_code "-i"); exit 1)),
-  M.add_load_dir ;
-  "-g", Arg.String (fun s -> if !bytecode_mode then () else (prerr_endline (M.option_not_in_native_code "-g"); exit 1)),
-  M.load_file ^
+  "-i", Arg.String (fun s -> ()), M.add_load_dir ;
+  "-g", Arg.String (fun s -> ()), M.load_file ^
   "\n\n *** HTML options ***\n";
 
 (* html only options *)
diff --git a/ocamldoc/odoc_args.mli b/ocamldoc/odoc_args.mli
index bd34ec5..c646536 100644
--- a/ocamldoc/odoc_args.mli
+++ b/ocamldoc/odoc_args.mli
@@ -22,10 +22,6 @@ type source_file =
 (** The include_dirs in the OCaml compiler. *)
 val include_dirs : string list ref
 
-(** Indicate if we are in bytecode mode or not.
-   (For the [ocamldoc] command).*)
-val bytecode_mode : bool ref
-
 (** The class type of documentation generators. *)
 class type doc_generator =
   object method generate : Odoc_module.t_module list -> unit end
diff --git a/ocamldoc/odoc_messages.ml b/ocamldoc/odoc_messages.ml
index f288da1..9753adf 100644
--- a/ocamldoc/odoc_messages.ml
+++ b/ocamldoc/odoc_messages.ml
@@ -24,7 +24,6 @@ let message_version = software^" "^config_version
 let usage = "Usage : "^(Sys.argv.(0))^" [options] <files>\n"
 let options_are = "Options are :"
 let option_version = "\tPrint version and exit"
-let bytecode_only = "(bytecode version only)"
 let latex_only = "(LaTeX only)"
 let texi_only = "(TeXinfo only)"
 let latex_texi_only = "(LaTeX and TeXinfo only)"
@@ -41,8 +40,8 @@ let option_intf ="<file>\tConsider <file> as a .mli file"
 let option_text ="<file>\tConsider <file> as a .txt file"
 let display_custom_generators_dir = "\tDisplay custom generators standard directory and exit"
 let add_load_dir = "<dir>\tAdd the given directory to the search path for custom\n"^
-  "\t\tgenerators "^bytecode_only
-let load_file = "<file.cm[o|a]>\n\t\tLoad file defining a new documentation generator\n\t\t"^bytecode_only
+  "\t\tgenerators"
+let load_file = "<file.cm[o|a|xs]>\n\t\tLoad file defining a new documentation generator"
 let nolabels = "\tIgnore non-optional labels in types"
 let werr = "\tTreat ocamldoc warnings as errors"
 let hide_warnings = "\n\t\tdo not print ocamldoc warnings"
-- 
1.6.2.4

