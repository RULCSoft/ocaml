#!/usr/bin/perl -w
#
# dh_ocaml - debhelper which computes OCaml md5sums and calculates OCaml
#	     dependencies
#
# Copyright (C) 2005, Stefano Zacchiroli <zack@debian.org>
#
# Created:	  Fri, 01 Apr 2005 19:50:48 +0200 zack
# Last-Modified:  Thu, 07 Apr 2005 09:40:15 +0200 zack
#
# This is free software, you can redistribute it and/or modify it under the
# terms of the GNU General Public License version 2 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA
#

# TODO check how dh_ocaml work when multiple binary packages are being built
# TODO add proper dependencies on ocaml (and findlib?)
# TODO check if dh_ocaml md5sums calculation works with -pack -ed units (e.g.
#      Foo.Bar)

=head1 NAME

dh_ocaml - calculates ocaml dependencies and adds postinst and prerm ocaml
scripts

=cut

use strict;
use Debian::Debhelper::Dh_Lib;
init();

my $ocamlc = "/usr/bin/ocamlc";
# my $ocaml_md5sums = "/usr/bin/ocaml-md5sums";
my $ocaml_md5sums = "/home/zack/dati/source/ocaml/dh_ocaml/ocaml-md5sums";
my @binaries = ($ocamlc, $ocaml_md5sums);
foreach my $bin (@binaries) {
  error "$bin does not exists or is not executable" unless -x $bin;
}
chomp (my $ocaml_lib_dir = `$ocamlc -where`);

my $md5sums_dir = "/var/lib/ocaml/md5sums";
my $md5sums_ext = ".md5sums";
my $ocaml_magic_line = "#!/usr/bin/ocamlrun";

=head1 SYNOPSIS

B<dh_ocaml> [S<I<debhelper options>>]

=head1 DESCRIPTION

dh_ocaml is a debhelper program that is responsible for generating
the ${ocaml:Depends} substitutions and adding them to substvars files. It will
also add a postinst and prerm script if required.

dh_ocaml acts both on ocaml library packages (having name libXXX-ocaml-dev) and
on packages shipping ocaml bytecode non-custom binaries (i.e. executables
interpreted by /usr/bin/ocamlrun).

On ocaml library packages dh_ocaml will firstly look at ocaml objects (files
matching *.cm[ao]) shipped by the package. Then, dh_ocaml uses ocamlobjinfo on
them for collecting information about ocaml modules (or units, in ocamlobjinfo
terminology) defined and used by them.  Information about defined units will be
used to automatically create the ocaml md5sums registry entry for your package,
e.g.  /var/lib/ocaml/md5sums/libXXX-ocaml-dev.md5sums. dh_ocaml will also take
care of creating autoscripts (postrm and postinst) which update the global
system registry (/var/lib/ocaml/md5sums/MD5SUMS) with the shipped entry.
Information about imported units will instead be used as keys in the ocaml
md5sums registry for retrieving dependency information for the package. Those
information will then be used to fill the ${ocaml:Depends} substvar.

On non-library packages, dh_ocaml tries to guess the ocaml objects corresponding
to shipped bytecode binaries and extract from them information about imported
units. Extracted information will then be used for filling the ${ocaml:Depends}
as discussed for the library case.

=head1 CONFORMS TO

Debian policy, version 3.6.1.1

OCaml packaging policy, version 0.6

=cut

# find ocaml bytecode executables contained in a given directory
sub find_ocaml_bc_binaries($) {
  my ($dir) = @_;
  my @binaries = split /\n/, `find $dir -type f -perm -0100`;
  my @bc_binaries;
  foreach my $bin (@binaries) {
    my $line = `/usr/bin/head -1 $bin` or next;
    chomp $line;
    push @bc_binaries, $bin if $line eq $ocaml_magic_line;
  }
  return @bc_binaries;
}

# read ocaml dependencies information from file and fill ocaml:Depends substvar
sub fill_ocaml_depends($$) {
  my ($package, $fname) = @_;
  delsubstvar($package, "ocaml:Depends");
  if (-f $fname) {
    open DEPS, "< $fname" or die "Can't open $fname";
    while (my $line = <DEPS>) {
      chomp $line;
      if ($line =~ /^\s*(\S+)\s+(\S+)\s*$/) {
	addsubstvar($package, "ocaml:Depends", $1, ">= $2");
      } elsif ($line =~ /^\s*(\S+)\s*$/) {
	addsubstvar($package, "ocaml:Depends", $1);
      }
    }
    close DEPS;
  }
}

# main
foreach my $package (@{$dh{DOPACKAGES}}) {
  my $tmpdir = tmpdir($package);
  isnative($package);	# sets $dh{VERSION}
  my $flags = "--package $package --version $dh{VERSION}";
  my $objinfo   = "debian/$package.ocamlobjinfo~";
  my $objlist   = "debian/$package.ocamlobjects~";
  my $ocamldeps = "debian/$package.ocamldeps~";
  if ($package =~ /^lib.*-ocaml-dev$/) {  # ocaml library package
      # create md5sum registry entry and post{inst,rm} scripts
    complex_doit("/usr/bin/find $tmpdir$ocaml_lib_dir -type f -name '*.cm[ao]' "
      . "> $objlist");
    complex_doit("mkdir -p $tmpdir$md5sums_dir");
    complex_doit("$ocaml_md5sums $flags --dump-info $objinfo compute < $objlist"
      . " | /usr/bin/sort -k 2"  # optional pass, just for "pretty" printing
      . " > $tmpdir$md5sums_dir/$package$md5sums_ext");
    my $sed = "s/#PACKAGE#/$package/; s/#VERSION#/$dh{VERSION}/";
    autoscript($package, "postinst", "postinst-ocaml", $sed);
    autoscript($package, "postrm", "postrm-ocaml", $sed);
      # compute deps for the library
    complex_doit("$ocaml_md5sums $flags --load-info $objinfo dep < $objlist"
      . " > $ocamldeps");
  } else {  # ocaml binary package
    my @binaries = find_ocaml_bc_binaries($tmpdir);
    complex_doit "> $ocamldeps";
    foreach my $bin (@binaries) { # try to find .cmo of bc binaries
      my $guess = basename($bin) . ".cm[ao]";
      complex_doit("/usr/bin/find . -type f -name '$guess' >> $objlist");
    }
    complex_doit("$ocaml_md5sums $flags dep < $objlist > $ocamldeps");
  }
  fill_ocaml_depends($package, $ocamldeps);
}

=head1 SEE ALSO

L<ocamlobjinfo(1)>, L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Stefano Zacchiroli <zack@debian.org>

=cut

