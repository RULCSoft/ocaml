   <section id="versions">
    <title>Version</title>
    <para>
    At any given time, the package &ocaml-pkg; should represent 
    the current stable upstream version of &ocaml-name; 
    revision &ocaml-version;.
    </para>

    <para>
    This package provides a virtual package called &ocaml-vpkg;. 
    This will help to track incompatible changes made within the 
    same version of &ocaml-name;.
    </para>
    
   </section>
   
   <section id="base">
    <title>Base Package</title>
    <para>
    In order to have a minimal installation, a virtual package 
    &ocaml-base-vpkg; exists. It enable to have
    a bare minimum install of &ocaml-name; library.
    </para>

    <para>
    As for &ocaml-pkg; this package provides
    a virtual package &ocaml-base-vpkg;. This will help to track
    incompatible changes made within the same version of &ocaml-name;.
    </para>

   </section>
   
   <section id="files">
    <title>File terminology for Ocaml packaging</title>

    <para>
     &ocaml-name; is a complete language allowing to create :
     <simplelist>
      <listitem>bytecoded executable</listitem>
      <listitem>bytecoded library ( <filename>*.cma</filename> )</listitem>
      <listitem>native executable</listitem>
      <listitem>native library ( <filename>*.cmxa</filename> )</listitem>
      <listitem>shared library ( for C-binding ) ( <filename>dll*.so</filename> )</listitem>
      <listitem>static library ( for C-binding ) ( <filename>lib*.a</filename> )</listitem>
      <listitem>bytecoded object ( <filename>*.cmo</filename> )</listitem>
      <listitem>native object ( <filename>*.cmx</filename> )</listitem>
      <listitem>configuration file for handling library ( <filename>META</filename> )</listitem>
      <listitem>&ocamldoc; generated documentation ( <filename>*.odoc</filename> )</listitem>
      <listitem>&camlp4; related files ( <filename>*.cm[ao]</filename> )</listitem>
     </simplelist>
    </para>
   
    <para>
     There is a convention considering that native executable should be 
     called <application>progname.opt</application> and bytecoded one 
     <application>progname.byte</application>. When packaging, only 
     <application>progname</application> is taken in account.
    </para>

    <para>
     For easying library management, &ocaml-force; used the 
     &ocamlfind; library management scheme. This scheme includes 
     a file named <filename>META</filename> which holds
     all the library possibility. This is the configuration file for
     handling library path and compile option.
    </para>
   </section>
 
   <section id="documentation">
    <title>Documentation</title>
    <para>
    The documentation is a joint effort of  &ocaml-force; and usptream. 
    There is many way to have documentation : 
    <simplelist>
     <listitem>Header files ( <filename>*.mli</filename> )</listitem>
     <listitem>Source files ( <filename>*.ml</filename> )</listitem>
     <listitem>Specific documentation provided by the upstream</listitem>
     <listitem>OCamldoc generated documentation</listitem>
    </simplelist>
    </para>

    <para>
    This documentation should be browse by different mean, from the
    most simple to the most complex. At least, they could all be browsed with 
    simple text editor. Specific and &ocamldoc; generated documentation should 
    be browse by using different viewer ( like <application>advi</application>, 
    HTML browser ...). There is also at least two
    specific &ocaml-name; browser : <application>docbrowse</application> shipped
    with <application>cameleon</application> and <application>ocamlbrowser</application>
    shipped with &ocaml-name; itself. The first one, need specific
    &ocamldoc; generated documentation. The second one enables
    the user to browse directly the prototype of each function shipped in the cmi gives
    to the application.
    </para>
    
    <para>
    You can generate &ocamldoc; specific documentation by using
    the <option>-dump</option> of this application. By using this, you dump the 
    intermediary representation of the document that will be generated by ocamldoc.
    This can be used to generate HTML documentation and manpages, by reloading this
    file ( using <option>-load</load> ).
    </para>

    <para>
    As of today, there is no way to post-process &ocamldoc;
    specific documentation. A &debian-name; package is under construction to do this
    task. It will be referred as &ocamldoc-base;.
    </para>

   </section>  

   <section id="path">
    <title>Path for all &ocaml-name; component</para>

    <para>
    Ocaml will search library in two different location, referred to
    as <varname>local</varname> which hold user installed library and as 
    <varname>core</varname> in which packaged modules stood.
    </para>
 
    <subsection id="library-path">
    <title>Library paths</title>

     <para>
     By default, &ocaml-name; will look for modules in this order :
     <variablelist>
      <varlistentry>
       <term><varname>local</varname></term>
       <listitem><filename>/usr/local/lib/ocaml/&ocaml-version;/</filename></listitem>
      </varlistentry>
      <varlistentry>
       <term><varname>core</varname></term>
       <listitem><filename>/usr/lib/ocaml/&ocaml-version;/</filename></listitem>
      </varlistentry>
     </variablelist>
     </para>

     <para>
     When installing a library, packagers should use a subdirectory of the preceding
     set of path. Subdirectory name is not mandatory. 
     <para>
     
     <para>
     If upstream developpers use already a subdirectory of the &ocaml-name; 
     standard library path, this path should be preserved in the &debian-name; 
     package, but made relative to the standard library path of the &ocaml-pkg;.
     Before using the provided subdirectory, packagers should check if there is 
     no subdirectory name clash with other &ocaml-name; library.
     </para>

     <para>
     If upstream developpers don't use this scheme, packagers are encouraged not
     to install this library in the standard library directory. They should create
     at least a subdirectory per source package ( in order to avoid library 
     name clash ). Packagers should also consider to do a larger separation by
     creating a subdirectory per binary package ( in order to avoid META name
     clash ).
     </para>

     <para>
     A suggested rule to choose name for this subdirectory is to use either the package 
     name provided by the META of the upstream, or the name of the library itself.
     </para>
     
    </subsection>

    <subsection id="META-path">
    <title><filename>META</filename></title>
    
    <para>
    <filename>META</filename> distribution is the best way to make more 
    easy specific library subdirectory oragnization. Even, if user building 
    a simple executable should only need one library, and don't want to 
    bother himself by using &ocamlfind;, this same user will find one day 
    that using &ocamlfind; permit him to compile from anywhere.
    </para>

    <para>
    Since we distribute <filename>META</filename>, all devel library
    should suggest the use of &ocamlfind;. So a <varname>Suggest:</varname>
    should be set to &ocamlfind-pkg;.
    </para>

    <para>
     By default, &ocamlfind; will look for <filename>META</filename> in this order :
     <variablelist>
      <varlistentry>
       <term><varname>local</varname></term>
       <listitem><filename>/usr/local/lib/ocaml/&ocaml-version;/META/</filename></listitem>
       <listitem><filename>/usr/local/lib/ocaml/&ocaml-version;/package/</filename></listitem>
      </varlistentry>
      <varlistentry>
       <term><varname>core</varname></term>
       <listitem><filename>/usr/lib/ocaml/&ocaml-version;/META/</filename></listitem>
       <listitem><filename>/usr/lib/ocaml/&ocaml-version;/package/</filename></listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
    The naming scheme of <filename>META</filename> is pretty simple :
    <simplelist>
    	<listitem>If <filename>META</filename> is placed in the subdirectory
	of the package, it should be called <filename>META</filename>. If
	you don't call it this way, it won't be recognized by &ocamlfind;.
	</listitem>
	<listitem>If <filename>META</filename> is placed in 
	<filename>/usr/lib/ocaml/&ocaml-version;/META/</filename>, it should
	be called <filename>META.package</filename>. In order to avoid
	name clash, it should be specialized to the binary package it is shipped
	from, otherwise package should be the package source.
	</listitem>
    </simplelist>
    </para>

    <para>
    If upstream doesn't provide a <filename>META</filename>, packager are encouraged
    to create one. It should be placed in the 
    <filename>/usr/lib/ocaml/&ocaml-version;/META/</filename>. <filename>META</filename>
    should be sent to upstream authors, in order to have it in the next version of
    the upstream source.
    </para>

    </subsection>


    <subsection id="ocamldoc-base-path">
    <title>&ocamldoc; specific generated documentation</title>

    <para>
    Even if this way of producing documentation is not mandatory, packagers are
    encouraged to use it, in order to ship lighter documentation, which could
    be processed by &ocaml-name; tools.
    </para>
    
    <para>
    By default, &ocamldoc-base; will look for <filename>*.odoc</filename> in this order :
     <variablelist>
      <varlistentry>
       <term><varname>local</varname></term>
       <listitem><filename>/usr/local/share/ocamldoc/&ocaml-version;/</filename></listitem>
      </varlistentry>
      <varlistentry>
       <term><varname>core</varname></term>
       <listitem><filename>/usr/share/ocamldoc/&ocaml-version;/</filename></listitem>
      </varlistentry>
     </variablelist>
    </para>

   <para>
   As for library, the naming scheme of the <filename>*.odoc</filename> should be 
   at least the name of the source package from which the documentation was
   generated. If a source package is split in many binary package and the
   documentation comes only in one <filename>*.odoc</filename>, packagers are 
   encouraged to create a separate package and to <varname>Suggest:</varname> it
   in each binary package which he described. If this could not be met, it is at 
   least a good practice to <varname>Suggest:</varname> the package containing
   the documentation.
   The packager should consider to ship one <filename>*.odoc</filename> per 
   library package.
   </para>

   <para>
   By doing this, &ocaml-force; is trying to build a clear way of distributing
   documentation. It should help user to find and exploit the documentation 
   coming from the source. Generating &ocamldoc; documentation is not so hard,
   and should take a one line call. Commenting the code in order to generate
   fully functional documentation is however an upstream task. Packager are encouraged
   to patch <filename>Makefile</filename> in order to have a target 
   <varname>odoc</varname>, generating this documentation and to contact upstream
   author to have a well commented source.
   </para>
   </subsection>

   <subsection id="camlp4-path">
   <para>
   Actually, &camlp4; extensions are stored in 
   <filename>/usr/lib/ocaml/&ocaml-version;/camlp4/</filename>. In order to do something
   cleaner, &ocaml-force; propose to put this files in their own directory, even in their
   own package. It is not mandatory, but it could ease a lot, the user of camlp4, by avoiding
   name clash.
   </para>

   <para>
   You just have to consider &camlp4; file just as standard library, except that you
   prefix them with <varname>-syntax</varname>. <example>For example : the syntax 
   extension coming with <application>libokey-ocaml-dev</application> should be stored
   in <filename>/usr/lib/ocaml/&ocaml-version;/okey-syntax/</filename>, the package
   containing it should be called <application>libokey-syntax-ocaml-dev</application>.
   </example>
   </para>

   <para>
   It is recommended to use <filename>META</filename> to specify how to handle this
   extension.
   </para>

   <para>
   All definition is taken from previous text considering syntax extension as a standalone
   library.
   </para>

   </subsection>
   </section>


